# -*- coding: utf-8 -*-
"""Active_Site_Residue_Explorer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YGrB2-i8KPALtEB8qmbYqqrONfAFQGmn

# üß¨ Active Site Residue Explorer

This project reads a protein `.pdb` file with a ligand/cofactor, and identifies **amino acid residues likely to be part of the active site**.

It does this by finding residues **within 5 √Ö** of the ligand atoms.

---

‚úÖ Tools: BioPython, Py3Dmol, Google Colab
"""

!pip install biopython py3Dmol

from Bio import PDB
from google.colab import files
import py3Dmol
import pandas as pd

"""## üìÇ Upload your protein-ligand .pdb file

"""

uploaded = files.upload()
pdb_file = list(uploaded.keys())[0]

parser = PDB.PDBParser(QUIET=True)
structure = parser.get_structure("protein", pdb_file)
print("‚úÖ Structure loaded.")

"""## üîç Finding residues within 5 √Ö of ligand atoms

"""

# We'll treat chain with HETATM as ligand
ligand_atoms = []
protein_atoms = []

for model in structure:
    for chain in model:
        for residue in chain:
            for atom in residue:
                if residue.id[0] != ' ':  # HETATM (ligand)
                    ligand_atoms.append(atom)
                else:
                    protein_atoms.append((chain.id, residue, atom))

active_site_hits = []

for chain_id, residue, atom in protein_atoms:
    for ligand_atom in ligand_atoms:
        distance = atom - ligand_atom
        if distance < 5.0:
            active_site_hits.append({
                "Chain": chain_id,
                "Residue": f"{residue.get_resname()} {residue.id[1]}",
                "Atom": atom.get_name(),
                "Distance": round(distance, 2)
            })
            break  # just record once per residue

df_active_site = pd.DataFrame(active_site_hits).drop_duplicates(subset=["Chain", "Residue"])
print(f"‚úÖ Found {len(df_active_site)} likely active site residues.")
df_active_site

"""## üñºÔ∏è 3D Visualization
Highlight likely active site residues in red, everything else as cartoon.

"""

with open(pdb_file, 'r') as f:
    pdb_data = f.read()

view = py3Dmol.view(width=600, height=400)
view.addModel(pdb_data, 'pdb')
view.setStyle({'cartoon': {'color': 'lightgrey'}})
# Highlight residues near ligand
for _, row in df_active_site.iterrows():
    resnum = int(row['Residue'].split()[1])
    chain = row['Chain']
    sel = {"chain": chain, "resi": str(resnum)}
    view.setStyle(sel, {"stick": {"colorscheme": "redCarbon"}})
view.zoomTo()
view.show()

"""## ‚úÖ Conclusion

This notebook:
- Uploaded a protein-ligand `.pdb` file
- Identified residues within **5 √Ö of ligand atoms** as likely active site residues
- Visualized them in 3D with Py3Dmol

---

üöÄ Perfect for drug discovery and enzyme studies.

"""